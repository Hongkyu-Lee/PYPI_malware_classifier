import torch
import torch.nn as nn

class TEXT_CLSF(nn.Module):
    def __init__(self, params):
        super(TEXT_CLSF, self).__init__()

        vocal_size = params['vocal_size']
        embedding_dim = params['embedding_dim']
        hidden_dim = params['hidden_dim']
        output_dim = params['output_dim']
        n_layers = params['n_layers']
        bidirectional = params['bidirectional']
        dropout = params['dropout']

        self.embedding = nn.Embedding(vocal_size, embedding_dim)
        self.lstm = nn.LSTM(embedding_dim,
                            hidden_dim,
                            num_layers=n_layers,
                            bidirectional=bidirectional,
                            dropout=dropout,
                            batch_first=True)

        self.fc = nn.Linear(hidden_dim*2, output_dim)
        self.act = nn.Sigmoid()

    def forward(self, text, text_length):
        embedded = self.embedding(text)
        # embedded = [batch size, sent_len, emb dim]

        # packed sequence
        packed_embedded = nn.utils.rnn.pack_padded_sequence(embedded, text_length, batch_first=True)

        packed_output, (hidden, cell) = self.lstm(packed_embedded)
        # hidden = [batch size, num layers * num directions,hid dim]
        # cell = [batch size, num layers * num directions,hid dim]

        # concat the final forward and backward hidden state
        hidden = torch.cat((hidden[-2, :, :], hidden[-1, :, :]), dim=1)

        # hidden = [batch size, hid dim * num directions]
        dense_outputs = self.fc(hidden)

        # Final activation function
        outputs = self.act(dense_outputs)

        return outputs

