import os

RULES = (
    "socket",
    "urllib",
    "http",
        )

def rule_based_classifier(script_path):
    '''
    :param script_path: path of setup.py file
    :return: 1 if file is malicious. 0 if not
    '''
    try:
        file = open(script_path, 'r')
    except: # no setup file
        return 0

    lines = file.readlines()

    for line in lines:
        for key in RULES:
            if key in line:
                # print(key, line)
                return 1

    return 0

def main():
    '''

    :return:
    '''
    malware_path_1 = "./malware_package"
    benign_path_1 = "./benign_package"

    # prediction on malware packages

    malware_prediction = []
    malware_path_2 = os.listdir(malware_path_1)

    for p in malware_path_2:
        _path = os.path.join(malware_path_1, p, 'setup.py')
        pred = rule_based_classifier(_path)
        malware_prediction.append(pred)

    # prediction on benign packages

    benign_prediction = []
    benign_path_2 = os.listdir(benign_path_1)

    for p in benign_path_2:
        _path = os.path.join(benign_path_1, p, 'setup.py')
        pred = rule_based_classifier(_path)
        benign_prediction.append(pred)

    # F-1 score
    TP = sum(malware_prediction)
    FN = len(malware_prediction) - sum(malware_prediction)
    FP = len(benign_prediction) - sum(benign_prediction)
    TN = sum(benign_prediction)

    print(f'From {len(malware_prediction)} malare packages, {sum(malware_prediction)} were predicted as malicious')
    print(f'From {len(benign_prediction)} benign packages, {len(benign_prediction)-sum(benign_prediction)} were predicted as malicious')

    print(f'Precision: {TP/(TP+FP)}',
          f'Recall: {TP/(TP+FN)}')

if __name__ == "__main__":
    main()